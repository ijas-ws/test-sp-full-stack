# CD pipeline for backend-node-graphql-mysql for development branch

name: CD backend-node-graphql-mysql - development

on:
  push:
    branches:
      - develop
      - qa
      - master
    paths: "backend-node-graphql-mysql/**"

  workflow_dispatch:

jobs:
  docker-build-and-push:
    name: Docker build image and push
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend-node-graphql-mysql
    strategy:
      matrix:
        node-version: [16.14.x]

    steps:
      # Checkout
      - name: Checkout to branch
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get branch name
        id: vars
        run: echo ::set-output name=short_ref::${GITHUB_REF_NAME}

      - name: Set environment name
        id: environment
        run: |
          if [[ ${{ steps.vars.outputs.short_ref }} == master ]]; then
               echo ::set-output name=environment_name::prod
          elif [[ ${{ steps.vars.outputs.short_ref }} == qa ]]; then
               echo ::set-output name=environment_name::qa
          else
               echo ::set-output name=environment_name::dev
          fi

      # Configure AWS with credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build, tag, and push image to Amazon ECR
      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_BUILDKIT: 1
        run: |
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --build-arg ENVIRONMENT_NAME=${{ steps.environment.outputs.environment_name }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Create and configure Amazon ECS task definition
      - name: Render Amazon ECS task definition
        id: backend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend-node-graphql-mysql/task-definition-${{ steps.vars.outputs.short_ref }}.json
          container-name: backend-container-${{ steps.environment.outputs.environment_name }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}

      # Deploy to Amazon ECS
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.backend-container.outputs.task-definition }}
          service: backend-service-${{ steps.environment.outputs.environment_name }}
          cluster: backend-cluster-${{ steps.environment.outputs.environment_name }}

      # Logout of Amazon
      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
